<blocks app="IoT Snap!, based on Snap! version 4.2.2.10. - dev - http://snap.berkeley.edu" version="1">

  <block-definition s="send command %&apos;c&apos; to Arduino %&apos;a&apos;" type="reporter" category="other"><header></header><code></code><translations>de:sende Kommando _ an Arduino _&#xD;</translations><inputs><input type="%txt"></input><input type="%n"></input></inputs><script><block s="doIf"><block s="reportOr"><block s="reportNot"><block s="reportGreaterThan"><block var="a"/><l>0</l></block></block><block s="reportNot"><block s="reportLessThan"><block var="a"/><l>255</l></block></block></block><script><block s="doReport"><l></l></block></script></block><block s="doWarp"><script><block s="doDeclareVariables"><list><l>ip-prefix</l><l>ip</l><l>url</l></list></block><block s="doSetVar"><l>ip-prefix</l><l>http://192.168.1.</l></block><block s="doSetVar"><l>ip</l><block s="reportJoinWords"><list><block var="ip-prefix"/><block var="a"/></list></block></block><block s="doSetVar"><l>url</l><block s="reportJoinWords"><list><block var="ip"/><l>/arduino/</l><block var="c"/></list></block></block><block s="doReport"><block s="reportURL"><block var="url"/></block></block></script></block></script></block-definition>

  <block-definition s="send command %&apos;c&apos; to board %&apos;a&apos;" type="reporter" category="other"><header></header><code></code><translations>de:sende Kommando _ an Board _&#xD;</translations><inputs><input type="%txt"></input><input type="%n"></input></inputs><script><block s="doIf"><block s="reportOr"><block s="reportNot"><block s="reportGreaterThan"><block var="a"/><l>0</l></block></block><block s="reportNot"><block s="reportLessThan"><block var="a"/><l>255</l></block></block></block><script><block s="doReport"><l></l></block></script></block><block s="doWarp"><script><block s="doDeclareVariables"><list><l>ip-prefix</l><l>ip</l><l>url</l></list></block><block s="doSetVar"><l>ip-prefix</l><l>http://192.168.1.</l></block><block s="doSetVar"><l>ip</l><block s="reportJoinWords"><list><block var="ip-prefix"/><block var="a"/></list></block></block><block s="doSetVar"><l>url</l><block s="reportJoinWords"><list><block var="ip"/><l>/</l><block var="c"/></list></block></block><block s="doReport"><block s="reportURL"><block var="url"/></block></block></script></block></script></block-definition>

  <block-definition s="substring of text %&apos;t&apos; starting with position %&apos;n&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>txt</l><l>start</l></list><l>return txt.substr(start-1);</l></block><list><l>abc</l><l>2</l></list></block></block></script></block-definition>



  <block-definition s="Sensor: read digital state from pin %&apos;X&apos; on Arduino %&apos;n&apos;" type="reporter" category="arduino"><header></header><code></code><translations>de:Sensor: lies digitalen Zustand von Pin _ an Arduino _&#xD;</translations><inputs><input type="%txt">D2<options>D2&#xD;D3&#xD;D4&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10&#xD;D11&#xD;D12&#xD;D13</options></input><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>ret</l></list></block><block s="doWarp"><script><block s="doSetVar"><l>ret</l><block s="evaluate"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>digitalRead/</l><block var="X"/></list></block><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></block><block s="doIfElse"><block s="reportEquals"><block s="reportListItem"><l>1</l><block s="reportTextSplit"><block var="ret"/><l><option>cr</option></l></block></block><l>1</l></block><script><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></block><block s="doReport"><l></l></block></script></block></script></block-definition>

  <block-definition s="Sensor: read analog value from pin %&apos;X&apos; on Arduino %&apos;n&apos;" type="reporter" category="arduino"><header></header><code></code><translations>de:Sensor: lies analogen Wert von Pin _ an Arduino _&#xD;</translations><inputs><input type="%txt">A0<options>A0&#xD;A1&#xD;A2&#xD;A3</options></input><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>ret</l></list></block><block s="doWarp"><script><block s="doSetVar"><l>ret</l><block s="evaluate"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>analogRead/</l><block var="X"/></list></block><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></block><block s="doReport"><block s="reportListItem"><l>1</l><block s="reportTextSplit"><block var="ret"/><l><option>cr</option></l></block></block></block></script></block></script></block-definition>

  <block-definition s="Actuator: write digital state %&apos;X&apos; to pin %&apos;Y&apos; on Arduino %&apos;A&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Aktor: schreibe digitalen Zustand _ an Pin _ von Arduino _&#xD;</translations><inputs><input type="%b">true</input><input type="%txt">D2<options>D2&#xD;D3&#xD;D4&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10&#xD;D11&#xD;D12&#xD;D13</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doIfElse"><block var="X"/><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>digitalWrite/</l><block var="Y"/><l>/</l><l>1</l></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>digitalWrite/</l><block var="Y"/><l>/</l><l>0</l></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block></script></block-definition>

  <block-definition s="Actuator: write analog value %&apos;X&apos; to pin %&apos;Y&apos; on Arduino %&apos;A&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Aktor: schreibe analogen Wert _ an Pin _ von Arduino _&#xD;</translations><inputs><input type="%n">128<options>0..255</options></input><input type="%txt">D3<options>D3&#xD;D5&#xD;D6&#xD;D9&#xD;D10&#xD;D11</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>analogWrite/</l><block var="Y"/><l>/</l><block var="X"/></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Buzzer: play tones on pin %&apos;Y&apos; on Arduino %&apos;A&apos; %&apos;S&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Summer: spiele TÃ¶ne an Pin _ von Arduino _ _&#xD;</translations><inputs><input type="%txt">D2<options>D2&#xD;D3&#xD;D4&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10&#xD;D11&#xD;D12&#xD;D13</options></input><input type="%n"></input><input type="%cs"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reportJSFunction"><list></list><l>tones = Array();&#xD;durations = Array();</l></block><list></list></block><block s="doRun"><block var="S"/><list></list></block><block s="doDeclareVariables"><list><l>tones</l><l>durations</l><l>pause</l></list></block><block s="doSetVar"><l>tones</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>return tones.join(",");</l></block><list></list></block></block><block s="doSetVar"><l>durations</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>return durations.join(",");</l></block><list></list></block></block><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>analogPlayMelody/</l><block var="Y"/><l>/</l><block var="tones"/><l>/</l><block var="durations"/></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block><block s="doSetVar"><l>pause</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>sum = 0;&#xD;&#xD;for(i = 0; i &lt;= durations.length; i++) {&#xD;  if(parseInt(durations[i]) &gt; 0) {&#xD;   sum += 1000/parseInt(durations[i]);&#xD;  }&#xD;}&#xD;&#xD;return sum/1000;</l></block><list></list></block></block></script></block><block s="doWait"><block var="pause"/></block><block s="doWait"><l>.5</l></block></script></block-definition>

  <block-definition s="Buzzer: tone %&apos;T&apos; with duration %&apos;D&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Summer: Ton _ mit Notenwert _&#xD;</translations><inputs><input type="%txt">C3<options>pause&#xD;B0&#xD;C1&#xD;CS1&#xD;D1&#xD;DS1&#xD;E1&#xD;F1&#xD;FS1&#xD;G1&#xD;GS1&#xD;A1&#xD;AS1&#xD;B1&#xD;C2&#xD;CS2&#xD;D2&#xD;DS2&#xD;E2&#xD;F2&#xD;FS2&#xD;G2&#xD;GS2&#xD;A2&#xD;AS2&#xD;B2&#xD;C3&#xD;CS3&#xD;D3&#xD;DS3&#xD;E3&#xD;F3&#xD;FS3&#xD;G3&#xD;GS3&#xD;A3&#xD;AS3&#xD;B3&#xD;C4&#xD;CS4&#xD;D4&#xD;DS4&#xD;E4&#xD;F4&#xD;FS4&#xD;G4&#xD;GS4&#xD;A4&#xD;AS4&#xD;B4</options></input><input type="%txt">1/4<options>1&#xD;1/2&#xD;1/4&#xD;1/8</options></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reportJSFunction"><list><l>T</l><l>D</l></list><l>if(typeof tones == "undefined" || typeof durations == "undefined")&#xD;   return;&#xD;&#xD;if(T == "pause") { tones.push(0); }&#xD;if(T == "B0") { tones.push(31); }&#xD;&#xD;if(T == "C1") { tones.push(33); }&#xD;&#xD;if(T == "CS1") { tones.push(35); }&#xD;&#xD;if(T == "D1") { tones.push(37); }&#xD;&#xD;if(T == "DS1") { tones.push(39); }&#xD;&#xD;if(T == "E1") { tones.push(41); }&#xD;&#xD;if(T == "F1") { tones.push(44); }&#xD;&#xD;if(T == "FS1") { tones.push(46); }&#xD;&#xD;if(T == "G1") { tones.push(49); }&#xD;&#xD;if(T == "GS1") { tones.push(52); }&#xD;&#xD;if(T == "A1") { tones.push(55); }&#xD;&#xD;if(T == "AS1") { tones.push(58); }&#xD;&#xD;if(T == "B1") { tones.push(62); }&#xD;&#xD;if(T == "C2") { tones.push(65); }&#xD;&#xD;if(T == "CS2") { tones.push(69); }&#xD;&#xD;if(T == "D2") { tones.push(73); }&#xD;&#xD;if(T == "DS2") { tones.push(78); }&#xD;&#xD;if(T == "E2") { tones.push(82); }&#xD;&#xD;if(T == "F2") { tones.push(87); }&#xD;&#xD;if(T == "FS2") { tones.push(93); }&#xD;&#xD;if(T == "G2") { tones.push(98); }&#xD;&#xD;if(T == "GS2") { tones.push(104); }&#xD;&#xD;if(T == "A2") { tones.push(110); }&#xD;&#xD;if(T == "AS2") { tones.push(117); }&#xD;&#xD;if(T == "B2") { tones.push(123); }&#xD;&#xD;if(T == "C3") { tones.push(131); }&#xD;&#xD;if(T == "CS3") { tones.push(139); }&#xD;&#xD;if(T == "D3") { tones.push(147); }&#xD;&#xD;if(T == "DS3") { tones.push(156); }&#xD;&#xD;if(T == "E3") { tones.push(165); }&#xD;&#xD;if(T == "F3") { tones.push(175); }&#xD;&#xD;if(T == "FS3") { tones.push(185); }&#xD;&#xD;if(T == "G3") { tones.push(196); }&#xD;&#xD;if(T == "GS3") { tones.push(208); }&#xD;&#xD;if(T == "A3") { tones.push(220); }&#xD;&#xD;if(T == "AS3") { tones.push(233); }&#xD;&#xD;if(T == "B3") { tones.push(247); }&#xD;&#xD;if(T == "C4") { tones.push(262); }&#xD;&#xD;if(T == "CS4") { tones.push(277); }&#xD;&#xD;if(T == "D4") { tones.push(294); }&#xD;&#xD;if(T == "DS4") { tones.push(311); }&#xD;&#xD;if(T == "E4") { tones.push(330); }&#xD;&#xD;if(T == "F4") { tones.push(349); }&#xD;&#xD;if(T == "FS4") { tones.push(370); }&#xD;&#xD;if(T == "G4") { tones.push(392); }&#xD;&#xD;if(T == "GS4") { tones.push(415); }&#xD;&#xD;if(T == "A4") { tones.push(440); }&#xD;&#xD;if(T == "AS4") { tones.push(466); }&#xD;&#xD;if(T == "B4") { tones.push(494); }&#xD;&#xD;if(T == "C5") { tones.push(523); }&#xD;&#xD;if(T == "CS5") { tones.push(554); }&#xD;&#xD;if(T == "D5") { tones.push(587); }&#xD;&#xD;if(T == "DS5") { tones.push(622); }&#xD;&#xD;if(T == "E5") { tones.push(659); }&#xD;&#xD;if(T == "F5") { tones.push(698); }&#xD;&#xD;if(T == "FS5") { tones.push(740); }&#xD;&#xD;if(T == "G5") { tones.push(784); }&#xD;&#xD;if(T == "GS5") { tones.push(831); }&#xD;&#xD;if(T == "A5") { tones.push(880); }&#xD;&#xD;if(T == "AS5") { tones.push(932); }&#xD;&#xD;if(T == "B5") { tones.push(988); }&#xD;&#xD;if(T == "C6") { tones.push(1047); }&#xD;&#xD;if(T == "CS6") { tones.push(1109); }&#xD;&#xD;if(T == "D6") { tones.push(1175); }&#xD;&#xD;if(T == "DS6") { tones.push(1245); }&#xD;&#xD;if(T == "E6") { tones.push(1319); }&#xD;&#xD;if(T == "F6") { tones.push(1397); }&#xD;&#xD;if(T == "FS6") { tones.push(1480); }&#xD;&#xD;if(T == "G6") { tones.push(1568); }&#xD;&#xD;if(T == "GS6") { tones.push(1661); }&#xD;&#xD;if(T == "A6") { tones.push(1760); }&#xD;&#xD;if(T == "AS6") { tones.push(1865); }&#xD;&#xD;if(T == "B6") { tones.push(1976); }&#xD;&#xD;if(T == "C7") { tones.push(2093); }&#xD;&#xD;if(T == "CS7") { tones.push(2217); }&#xD;&#xD;if(T == "D7") { tones.push(2349); }&#xD;&#xD;if(T == "DS7") { tones.push(2489); }&#xD;&#xD;if(T == "E7") { tones.push(2637); }&#xD;&#xD;if(T == "F7") { tones.push(2794); }&#xD;&#xD;if(T == "FS7") { tones.push(2960); }&#xD;&#xD;if(T == "G7") { tones.push(3136); }&#xD;&#xD;if(T == "GS7") { tones.push(3322); }&#xD;&#xD;if(T == "A7") { tones.push(3520); }&#xD;&#xD;if(T == "AS7") { tones.push(3729); }&#xD;&#xD;if(T == "B7") { tones.push(3951); }&#xD;&#xD;if(T == "C8") { tones.push(4186); }&#xD;&#xD;if(T == "CS8") { tones.push(4435); }&#xD;&#xD;if(T == "D8") { tones.push(4699); }&#xD;&#xD;if(T == "DS8") { tones.push(4978); }&#xD;&#xD;&#xD;if(D.length &lt;= 2)&#xD;  durations.push(D);&#xD;else if(D.length &gt; 2)&#xD;  durations.push(D.substr(2));</l></block><list><block var="T"/><block var="D"/></list></block></script></block></script></block-definition>

  <block-definition s="Display: %&apos;activate&apos; on Arduino %&apos;n&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Display: _ an Arduino _&#xD;</translations><inputs><input type="%s">activate<options>activate&#xD;deactivate</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doIfElse"><block s="reportEquals"><block var="activate"/><l>activate</l></block><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><l>digitalLcdOn</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><l>digitalLcdOff</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block></script></block-definition>

  <block-definition s="Display: clear on Arduino %&apos;n&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Display: leeren an Arduino _&#xD;</translations><inputs><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><l>digitalLcdClear</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Display: %&apos;start&apos; blinking on Arduino %&apos;n&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Display: _ blinken an Arduino _&#xD;</translations><inputs><input type="%s">start<options>start&#xD;stop</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doIfElse"><block s="reportEquals"><block var="start"/><l>start</l></block><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><l>digitalLcdBlink</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><l>digitalLcdNoBlink</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block></script></block-definition>

  <block-definition s="Display: set backlight to r= %&apos;R&apos; g= %&apos;G&apos; b= %&apos;B&apos; on Arduino %&apos;n&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Display: setze Hintergrundfarbe auf r= _ g= _ b= _ an Arduino _&#xD;</translations><inputs><input type="%n">0<options>0..255</options></input><input type="%n">255<options>0..255</options></input><input type="%n">0<options>0..255</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>digitalLcdBacklight/</l><block var="R"/><l>/</l><block var="G"/><l>/</l><block var="B"/></list></block><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Display: set text to %&apos;txt&apos; on Arduino %&apos;n&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Display: setze Text auf _ an Arduino _&#xD;</translations><inputs><input type="%txt">Text</input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>digitalLcdText/</l><block var="txt"/></list></block><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Display: %&apos;c&apos; text on Arduino %&apos;n&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Display: Text _ an Arduino _&#xD;</translations><inputs><input type="%s">hide<options>show&#xD;hide</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doIfElse"><block s="reportEquals"><block var="c"/><l>show</l></block><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><l>digitalLcdShow</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><l>digitalLcdHide</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block></script></block-definition>

  <block-definition s="Display: scroll text %&apos;txt&apos; on Arduino %&apos;n&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Display: scrolle Text _ an Arduino _&#xD;</translations><inputs><input type="%s">Text (max. length =24)</input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>digitalLcdScroll/</l><block var="txt"/></list></block><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Servo (CR): set value to %&apos;X&apos; on pin %&apos;Y&apos; of Arduino %&apos;A&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Servo (CR): setze Wert auf _ an Pin _ von Arduino _&#xD;</translations><inputs><input type="%n">1200<options>clockwise: ca. 1000-1475=1200&#xD;stop: ca. 1475=1475&#xD;counter-clockwise: ca. 1475-2000=1800</options></input><input type="%txt">D2<options>D2&#xD;D3&#xD;D4&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10&#xD;D11&#xD;D12&#xD;D13</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>servoWrite/</l><block var="Y"/><l>/</l><block var="X"/></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Servo (standard): set angle to %&apos;X&apos; Â° on pin %&apos;Y&apos; of Arduino %&apos;A&apos;" type="command" category="arduino"><header></header><code></code><translations>de:Servo (Standard): setze Winkel auf _ Â° an Pin _ von Arduino _&#xD;</translations><inputs><input type="%n">90<options>angle: 0-180=90</options></input><input type="%txt">D2<options>D2&#xD;D3&#xD;D4&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10&#xD;D11&#xD;D12&#xD;D13</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to Arduino %n"><block s="reportJoinWords"><list><l>servoWrite/</l><block var="Y"/><l>/</l><block var="X"/></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>



  <block-definition s="Sensor: read digital state from pin %&apos;X&apos; on board %&apos;n&apos;" type="reporter" category="wemos"><header></header><code></code><translations>de:Sensor: lies digitalen Zustand von Pin _ an Board _</translations><inputs><input type="%txt">D2<options>D2&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10</options></input><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>result</l></list></block><block s="doWarp"><script><block s="doSetVar"><l>result</l><block s="evaluate"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>digitalRead?pin=</l><block var="X"/></list></block><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></block><block s="bubble"><block var="result"/></block><block s="doIfElse"><block s="reportEquals"><block var="result"/><l>1</l></block><script><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></block></script></block></script></block-definition>

  <block-definition s="Sensor: read analog value from pin A0 on board %&apos;n&apos;" type="reporter" category="wemos"><header></header><code></code><translations>de:Sensor: lies analogen Wert von Pin A0 an Board _</translations><inputs><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>ret</l></list></block><block s="doWarp"><script><block s="doSetVar"><l>ret</l><block s="evaluate"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><l>analogRead?pin=A0</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></block><block s="doReport"><block var="ret"/></block></script></block></script></block-definition>

  <block-definition s="Actuator: write digital state %&apos;X&apos; to pin %&apos;Y&apos; on board %&apos;A&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Aktor: schreibe digitalen Zustand _ an Pin _ von Board _&#xD;</translations><inputs><input type="%b">true</input><input type="%txt">D2<options>D2&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doIfElse"><block var="X"/><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>digitalWrite?pin=</l><block var="Y"/><l>&amp;val=</l><l>1</l></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>digitalWrite?pin=</l><block var="Y"/><l>&amp;val=</l><l>0</l></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block></script></block-definition>

  <block-definition s="Actuator: write analog value %&apos;X&apos; to pin %&apos;Y&apos; on board %&apos;A&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Aktor: schreibe analogen Wert _ an Pin _ von Board _&#xD;</translations><inputs><input type="%n">128<options>0..255</options></input><input type="%txt">D2<options>D2&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>pwmWrite?pin=</l><block var="Y"/><l>&amp;val=</l><block var="X"/></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Buzzer: play tones on pin %&apos;Y&apos; on board %&apos;A&apos; %&apos;S&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Summer: spiele TÃ¶ne an Pin _ von Board _ _&#xD;</translations><inputs><input type="%txt">D2<options>D2&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10</options></input><input type="%n"></input><input type="%cs"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reportJSFunction"><list></list><l>tones = Array();&#xD;durations = Array();</l></block><list></list></block><block s="doRun"><block var="S"/><list></list></block><custom-block s="Buzzer: tone %txt with note value %txt"><l>C3</l><l>1/4</l></custom-block><block s="doDeclareVariables"><list><l>tones</l><l>durations</l><l>pause</l></list></block><block s="doSetVar"><l>tones</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>return tones.join(",");</l></block><list></list></block></block><block s="doSetVar"><l>durations</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>return durations.join(",");</l></block><list></list></block></block><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>playMelody?pin=</l><block var="Y"/><l>&amp;tones=</l><block var="tones"/><l>&amp;durations=</l><block var="durations"/></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block><block s="doSetVar"><l>pause</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>sum = 0;&#xD;&#xD;for(i = 0; i &lt;= durations.length; i++) {&#xD;  if(parseInt(durations[i]) &gt; 0) {&#xD;   sum += 1000/parseInt(durations[i]);&#xD;  }&#xD;}&#xD;&#xD;return sum/1000;</l></block><list></list></block></block></script></block><block s="doWait"><l>.5</l></block><block s="doWait"><block var="pause"/></block></script><scripts><script x="230.00000099999988" y="499.0000010000001"><block s="doShowVar"><l>tones</l></block><block s="doShowVar"><l>durations</l></block></script></scripts></block-definition>

  <block-definition s="Buzzer: tone %&apos;T&apos; with note value %&apos;D&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Summer: Ton _ mit Notenwert _&#xD;</translations><inputs><input type="%txt">C3<options>Pause&#xD;B0&#xD;C1&#xD;CS1&#xD;D1&#xD;DS1&#xD;E1&#xD;F1&#xD;FS1&#xD;G1&#xD;GS1&#xD;A1&#xD;AS1&#xD;B1&#xD;C2&#xD;CS2&#xD;D2&#xD;DS2&#xD;E2&#xD;F2&#xD;FS2&#xD;G2&#xD;GS2&#xD;A2&#xD;AS2&#xD;B2&#xD;C3&#xD;CS3&#xD;D3&#xD;DS3&#xD;E3&#xD;F3&#xD;FS3&#xD;G3&#xD;GS3&#xD;A3&#xD;AS3&#xD;B3&#xD;C4&#xD;CS4&#xD;D4&#xD;DS4&#xD;E4&#xD;F4&#xD;FS4&#xD;G4&#xD;GS4&#xD;A4&#xD;AS4&#xD;B4</options></input><input type="%txt">1/4<options>1&#xD;1/2&#xD;1/4&#xD;1/8</options></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reportJSFunction"><list><l>T</l><l>D</l></list><l>if(typeof tones == "undefined" || typeof durations == "undefined")&#xD;   return;&#xD;&#xD;if(T == "Pause") { tones.push(0); }&#xD;if(T == "B0") { tones.push(31); }&#xD;&#xD;if(T == "C1") { tones.push(33); }&#xD;&#xD;if(T == "CS1") { tones.push(35); }&#xD;&#xD;if(T == "D1") { tones.push(37); }&#xD;&#xD;if(T == "DS1") { tones.push(39); }&#xD;&#xD;if(T == "E1") { tones.push(41); }&#xD;&#xD;if(T == "F1") { tones.push(44); }&#xD;&#xD;if(T == "FS1") { tones.push(46); }&#xD;&#xD;if(T == "G1") { tones.push(49); }&#xD;&#xD;if(T == "GS1") { tones.push(52); }&#xD;&#xD;if(T == "A1") { tones.push(55); }&#xD;&#xD;if(T == "AS1") { tones.push(58); }&#xD;&#xD;if(T == "B1") { tones.push(62); }&#xD;&#xD;if(T == "C2") { tones.push(65); }&#xD;&#xD;if(T == "CS2") { tones.push(69); }&#xD;&#xD;if(T == "D2") { tones.push(73); }&#xD;&#xD;if(T == "DS2") { tones.push(78); }&#xD;&#xD;if(T == "E2") { tones.push(82); }&#xD;&#xD;if(T == "F2") { tones.push(87); }&#xD;&#xD;if(T == "FS2") { tones.push(93); }&#xD;&#xD;if(T == "G2") { tones.push(98); }&#xD;&#xD;if(T == "GS2") { tones.push(104); }&#xD;&#xD;if(T == "A2") { tones.push(110); }&#xD;&#xD;if(T == "AS2") { tones.push(117); }&#xD;&#xD;if(T == "B2") { tones.push(123); }&#xD;&#xD;if(T == "C3") { tones.push(131); }&#xD;&#xD;if(T == "CS3") { tones.push(139); }&#xD;&#xD;if(T == "D3") { tones.push(147); }&#xD;&#xD;if(T == "DS3") { tones.push(156); }&#xD;&#xD;if(T == "E3") { tones.push(165); }&#xD;&#xD;if(T == "F3") { tones.push(175); }&#xD;&#xD;if(T == "FS3") { tones.push(185); }&#xD;&#xD;if(T == "G3") { tones.push(196); }&#xD;&#xD;if(T == "GS3") { tones.push(208); }&#xD;&#xD;if(T == "A3") { tones.push(220); }&#xD;&#xD;if(T == "AS3") { tones.push(233); }&#xD;&#xD;if(T == "B3") { tones.push(247); }&#xD;&#xD;if(T == "C4") { tones.push(262); }&#xD;&#xD;if(T == "CS4") { tones.push(277); }&#xD;&#xD;if(T == "D4") { tones.push(294); }&#xD;&#xD;if(T == "DS4") { tones.push(311); }&#xD;&#xD;if(T == "E4") { tones.push(330); }&#xD;&#xD;if(T == "F4") { tones.push(349); }&#xD;&#xD;if(T == "FS4") { tones.push(370); }&#xD;&#xD;if(T == "G4") { tones.push(392); }&#xD;&#xD;if(T == "GS4") { tones.push(415); }&#xD;&#xD;if(T == "A4") { tones.push(440); }&#xD;&#xD;if(T == "AS4") { tones.push(466); }&#xD;&#xD;if(T == "B4") { tones.push(494); }&#xD;&#xD;if(T == "C5") { tones.push(523); }&#xD;&#xD;if(T == "CS5") { tones.push(554); }&#xD;&#xD;if(T == "D5") { tones.push(587); }&#xD;&#xD;if(T == "DS5") { tones.push(622); }&#xD;&#xD;if(T == "E5") { tones.push(659); }&#xD;&#xD;if(T == "F5") { tones.push(698); }&#xD;&#xD;if(T == "FS5") { tones.push(740); }&#xD;&#xD;if(T == "G5") { tones.push(784); }&#xD;&#xD;if(T == "GS5") { tones.push(831); }&#xD;&#xD;if(T == "A5") { tones.push(880); }&#xD;&#xD;if(T == "AS5") { tones.push(932); }&#xD;&#xD;if(T == "B5") { tones.push(988); }&#xD;&#xD;if(T == "C6") { tones.push(1047); }&#xD;&#xD;if(T == "CS6") { tones.push(1109); }&#xD;&#xD;if(T == "D6") { tones.push(1175); }&#xD;&#xD;if(T == "DS6") { tones.push(1245); }&#xD;&#xD;if(T == "E6") { tones.push(1319); }&#xD;&#xD;if(T == "F6") { tones.push(1397); }&#xD;&#xD;if(T == "FS6") { tones.push(1480); }&#xD;&#xD;if(T == "G6") { tones.push(1568); }&#xD;&#xD;if(T == "GS6") { tones.push(1661); }&#xD;&#xD;if(T == "A6") { tones.push(1760); }&#xD;&#xD;if(T == "AS6") { tones.push(1865); }&#xD;&#xD;if(T == "B6") { tones.push(1976); }&#xD;&#xD;if(T == "C7") { tones.push(2093); }&#xD;&#xD;if(T == "CS7") { tones.push(2217); }&#xD;&#xD;if(T == "D7") { tones.push(2349); }&#xD;&#xD;if(T == "DS7") { tones.push(2489); }&#xD;&#xD;if(T == "E7") { tones.push(2637); }&#xD;&#xD;if(T == "F7") { tones.push(2794); }&#xD;&#xD;if(T == "FS7") { tones.push(2960); }&#xD;&#xD;if(T == "G7") { tones.push(3136); }&#xD;&#xD;if(T == "GS7") { tones.push(3322); }&#xD;&#xD;if(T == "A7") { tones.push(3520); }&#xD;&#xD;if(T == "AS7") { tones.push(3729); }&#xD;&#xD;if(T == "B7") { tones.push(3951); }&#xD;&#xD;if(T == "C8") { tones.push(4186); }&#xD;&#xD;if(T == "CS8") { tones.push(4435); }&#xD;&#xD;if(T == "D8") { tones.push(4699); }&#xD;&#xD;if(T == "DS8") { tones.push(4978); }&#xD;&#xD;&#xD;if(D.length &lt;= 2)&#xD;  durations.push(D);&#xD;else if(D.length &gt; 2)&#xD;  durations.push(D.substr(2));</l></block><list><block var="T"/><block var="D"/></list></block></script></block></script></block-definition>

  <block-definition s="Display: %&apos;c&apos; on board %&apos;n&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Display: _ an Board _&#xD;</translations><inputs><input type="%s">activate<options>activate&#xD;deactivate</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doIfElse"><block s="reportEquals"><block var="c"/><l>activate</l></block><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><l>LCD/init</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><l>LCD/reset</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block></script></block-definition>

  <block-definition s="Display: clear on board %&apos;n&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Display: leeren an Board _&#xD;</translations><inputs><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><l>LCD/clear</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Display: %&apos;c&apos; blinking on board %&apos;n&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Display: _ blinken an Board _&#xD;</translations><inputs><input type="%s">start<options>start&#xD;stop</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doIfElse"><block s="reportEquals"><block var="c"/><l>start</l></block><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><l>LCD/blink?state=true</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><l>LCD/blink?state=false</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block></script></block-definition>

  <block-definition s="Display: set backlight to r= %&apos;R&apos; g= %&apos;G&apos; b= %&apos;B&apos; on board %&apos;n&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Display: setze Hintergrundfarbe auf r= _ g= _ b= _ an Board _&#xD;</translations><inputs><input type="%n">0<options>0..255</options></input><input type="%n">255<options>0..255</options></input><input type="%n">0<options>0..255</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>LCD/color?red=</l><block var="R"/><l>&amp;green=</l><block var="G"/><l>&amp;blue=</l><block var="B"/></list></block><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Display: set text to %&apos;txt&apos; on board %&apos;n&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Display: setze Text auf _ an Board _&#xD;</translations><inputs><input type="%txt">Text</input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>LCD/write?text=</l><block var="txt"/></list></block><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Display: %&apos;c&apos; text on board %&apos;n&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Display: Text _ an Board _&#xD;</translations><inputs><input type="%s">hide<options>show&#xD;hide</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doIfElse"><block s="reportEquals"><block var="c"/><l>show</l></block><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><l>LCD/show?state=true</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><l>LCD/show?state=false</l><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block></script></block-definition>

  <block-definition s="Display: scroll text %&apos;txt&apos; on board %&apos;n&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Display: scrolle Text _ an Board _&#xD;</translations><inputs><input type="%s">Text (max. length =24)</input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>LCD/scroll?text=</l><block var="txt"/></list></block><block var="n"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Servo (CR): set value to %&apos;X&apos; on pin %&apos;Y&apos; of board %&apos;A&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Servo (CR): setze Wert auf _ an Pin _ von Board _&#xD;</translations><inputs><input type="%n">1200<options>clockwise: ca. 1000-1475=1200&#xD;stop: ca. 1475=1475&#xD;counter-clockwise: ca. 1475-2000=1800</options></input><input type="%txt">D2<options>D2&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>servo?pin=</l><block var="Y"/><l>&amp;val=</l><block var="X"/></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

  <block-definition s="Servo (standard): set angle to %&apos;X&apos; Â° on pin %&apos;Y&apos; of board %&apos;A&apos;" type="command" category="wemos"><header></header><code></code><translations>de:Servo (Standard): setze Winkel auf _ Â° an Pin _ von Board _&#xD;</translations><inputs><input type="%n">90<options>angle: 0-180=90</options></input><input type="%txt">D2<options>D2&#xD;D5&#xD;D6&#xD;D7&#xD;D8&#xD;D9&#xD;D10</options></input><input type="%n"></input></inputs><script><block s="doWarp"><script><block s="doRun"><block s="reifyReporter"><autolambda><custom-block s="send command %txt to board %n"><block s="reportJoinWords"><list><l>servo?pin=</l><block var="Y"/><l>&amp;val=</l><block var="X"/></list></block><block var="A"/></custom-block></autolambda><list></list></block><list></list></block></script></block></script></block-definition>

</blocks>
